{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\venka\\\\Downloads\\\\DoctorBooking (3)\\\\DoctorBooking\\\\frontend\\\\src\\\\components\\\\TopDoctors.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import { Bar } from 'react-chartjs-2';\n\n// const TopDoctors = ({ bookingData }) => {\n//   const doctorEarnings = {};\n\n//   // Extract doctor earnings\n//   bookingData.forEach((booking) => {\n//     const doctorName = booking.Username_doctor;\n\n//     // Calculate total earnings of each doctor\n//     doctorEarnings[doctorName] = (doctorEarnings[doctorName] || 0) + booking.bookedServicesData.reduce((sum, service) => sum + service.amount, 0);\n//   });\n\n//   const topDoctors = Object.entries(doctorEarnings)\n//     .sort(([, a], [, b]) => b - a)\n//     .slice(0, 10);\n\n//   const data = {\n//     labels: topDoctors.map(([doctor]) => doctor),\n//     datasets: [{\n//       label: 'Top 10 Doctors with Highest Earnings',\n//       data: topDoctors.map(([, earnings]) => earnings),\n//       backgroundColor: 'rgba(75,192,192,0.2)',\n//       borderColor: 'rgba(75,192,192,1)',\n//       borderWidth: 1,\n//     }],\n//   };\n\n//   return (\n//     <div>\n//       <h3>Top 10 Doctors with Highest Earnings</h3>\n//       <Bar data={data} />\n//     </div>\n//   );\n// };\n\n// export default TopDoctors;\n// import React, { useState, useEffect } from 'react';\n\n// const TopDoctors = ({ bookingData }) => {\n//   const [topDoctors, setTopDoctors] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch data from your API or database\n//     // You can use a state management library like Redux for managing global state\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch('http://localhost:5000/api/bookings/top');\n//         const data = await response.json();\n//         setTopDoctors(data);\n//       } catch (error) {\n//         console.error('Error fetching top doctors data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <div>\n//       <h1>Top 10 Doctors with Highest Earnings</h1>\n//       <ul>\n//   {topDoctors\n//     .filter((doctor, index, self) =>\n//       index === self.findIndex((d) => d.accId === doctor.accId)\n//     )\n//     .map((uniqueDoctor, index) => (\n//       <li key={index}>\n//         <h2>{uniqueDoctor.Username_doctor}</h2>\n//         <p>Email: {uniqueDoctor.doctorEmail}</p>\n//         {/* Add more details as needed */}\n//       </li>\n//     ))}\n// </ul>\n\n//     </div>\n//   );\n// };\n\n// export default TopDoctors;\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopDoctors = () => {\n  _s();\n  const [topDoctors, setTopDoctors] = useState([]);\n  useEffect(() => {\n    // Fetch top 10 doctors based on amount from the server\n    fetch('http://localhost:5000/api/bookings').then(response => response.json()).then(data => setTopDoctors(data)).catch(error => console.error('Error fetching top doctors:', error));\n  }, []);\n\n  // Create a dictionary to store the total amount for each doctor's name\n  const doctorAmounts = {};\n\n  // Calculate the total amount for each unique doctor's name\n  topDoctors.forEach(doctor => {\n    const doctorName = doctor.Username_doctor;\n    const amount = doctor.bookedServicesData[0].amount;\n    if (doctorAmounts[doctorName]) {\n      doctorAmounts[doctorName] += amount;\n    } else {\n      doctorAmounts[doctorName] = amount;\n    }\n  });\n\n  // Convert the dictionary into an array of objects\n  const doctorsWithTotalAmount = Object.keys(doctorAmounts).map(doctorName => ({\n    Username_doctor: doctorName,\n    totalAmount: doctorAmounts[doctorName]\n  }));\n\n  // Sort doctors in descending order based on the total amount\n  const sortedDoctors = doctorsWithTotalAmount.sort((a, b) => b.totalAmount - a.totalAmount);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Doctors by Total Amount\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sortedDoctors.map((doctor, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: doctor.Username_doctor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(TopDoctors, \"+maPJrAPGon9dGz2/0KRaB3jHWU=\");\n_c = TopDoctors;\nexport default TopDoctors;\nvar _c;\n$RefreshReg$(_c, \"TopDoctors\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TopDoctors","_s","topDoctors","setTopDoctors","fetch","then","response","json","data","catch","error","console","doctorAmounts","forEach","doctor","doctorName","Username_doctor","amount","bookedServicesData","doctorsWithTotalAmount","Object","keys","map","totalAmount","sortedDoctors","sort","a","b","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["C:/Users/venka/Downloads/DoctorBooking (3)/DoctorBooking/frontend/src/components/TopDoctors.js"],"sourcesContent":["// import React from 'react';\r\n// import { Bar } from 'react-chartjs-2';\r\n\r\n// const TopDoctors = ({ bookingData }) => {\r\n//   const doctorEarnings = {};\r\n\r\n//   // Extract doctor earnings\r\n//   bookingData.forEach((booking) => {\r\n//     const doctorName = booking.Username_doctor;\r\n\r\n//     // Calculate total earnings of each doctor\r\n//     doctorEarnings[doctorName] = (doctorEarnings[doctorName] || 0) + booking.bookedServicesData.reduce((sum, service) => sum + service.amount, 0);\r\n//   });\r\n\r\n//   const topDoctors = Object.entries(doctorEarnings)\r\n//     .sort(([, a], [, b]) => b - a)\r\n//     .slice(0, 10);\r\n\r\n//   const data = {\r\n//     labels: topDoctors.map(([doctor]) => doctor),\r\n//     datasets: [{\r\n//       label: 'Top 10 Doctors with Highest Earnings',\r\n//       data: topDoctors.map(([, earnings]) => earnings),\r\n//       backgroundColor: 'rgba(75,192,192,0.2)',\r\n//       borderColor: 'rgba(75,192,192,1)',\r\n//       borderWidth: 1,\r\n//     }],\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h3>Top 10 Doctors with Highest Earnings</h3>\r\n//       <Bar data={data} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TopDoctors;\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const TopDoctors = ({ bookingData }) => {\r\n//   const [topDoctors, setTopDoctors] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch data from your API or database\r\n//     // You can use a state management library like Redux for managing global state\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:5000/api/bookings/top');\r\n//         const data = await response.json();\r\n//         setTopDoctors(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching top doctors data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Top 10 Doctors with Highest Earnings</h1>\r\n//       <ul>\r\n//   {topDoctors\r\n//     .filter((doctor, index, self) =>\r\n//       index === self.findIndex((d) => d.accId === doctor.accId)\r\n//     )\r\n//     .map((uniqueDoctor, index) => (\r\n//       <li key={index}>\r\n//         <h2>{uniqueDoctor.Username_doctor}</h2>\r\n//         <p>Email: {uniqueDoctor.doctorEmail}</p>\r\n//         {/* Add more details as needed */}\r\n//       </li>\r\n//     ))}\r\n// </ul>\r\n\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TopDoctors;\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst TopDoctors = () => {\r\n  const [topDoctors, setTopDoctors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch top 10 doctors based on amount from the server\r\n    fetch('http://localhost:5000/api/bookings')\r\n      .then((response) => response.json())\r\n      .then((data) => setTopDoctors(data))\r\n      .catch((error) => console.error('Error fetching top doctors:', error));\r\n  }, []);\r\n\r\n  // Create a dictionary to store the total amount for each doctor's name\r\n  const doctorAmounts = {};\r\n\r\n  // Calculate the total amount for each unique doctor's name\r\n  topDoctors.forEach((doctor) => {\r\n    const doctorName = doctor.Username_doctor;\r\n    const amount = doctor.bookedServicesData[0].amount;\r\n\r\n    if (doctorAmounts[doctorName]) {\r\n      doctorAmounts[doctorName] += amount;\r\n    } else {\r\n      doctorAmounts[doctorName] = amount;\r\n    }\r\n  });\r\n\r\n  // Convert the dictionary into an array of objects\r\n  const doctorsWithTotalAmount = Object.keys(doctorAmounts).map((doctorName) => ({\r\n    Username_doctor: doctorName,\r\n    totalAmount: doctorAmounts[doctorName],\r\n  }));\r\n\r\n  // Sort doctors in descending order based on the total amount\r\n  const sortedDoctors = doctorsWithTotalAmount.sort((a, b) => b.totalAmount - a.totalAmount);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Doctors by Total Amount</h2>\r\n      <ul>\r\n        {sortedDoctors.map((doctor, index) => (\r\n          <li key={index}>\r\n            <h4>{doctor.Username_doctor}</h4>\r\n            {/* <p>Total Amount: {doctor.totalAmount}</p> */}\r\n            {/* Add more details as needed */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopDoctors;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}