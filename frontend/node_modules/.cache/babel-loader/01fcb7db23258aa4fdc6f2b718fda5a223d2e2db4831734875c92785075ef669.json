{"ast":null,"code":"\n// import React, { useState, useEffect } from 'react';\n\n// const TopDoctors = () => {\n//   const [topDoctors, setTopDoctors] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch top 10 doctors based on amount from the server\n//     fetch('http://localhost:5000/api/bookings')\n//       .then((response) => response.json())\n//       .then((data) => setTopDoctors(data))\n//       .catch((error) => console.error('Error fetching top doctors:', error));\n//   }, []);\n\n//   // Create a dictionary to store the total amount for each doctor's name\n//   const doctorAmounts = {};\n\n//   // Calculate the total amount for each unique doctor's name\n//   topDoctors.forEach((doctor) => {\n//     const doctorName = doctor.Username_doctor;\n//     const amount = doctor.bookedServicesData[0].amount;\n\n//     if (doctorAmounts[doctorName]) {\n//       doctorAmounts[doctorName] += amount;\n//     } else {\n//       doctorAmounts[doctorName] = amount;\n//     }\n//   });\n\n//   // Convert the dictionary into an array of objects\n//   const doctorsWithTotalAmount = Object.keys(doctorAmounts).map((doctorName) => ({\n//     Username_doctor: doctorName,\n//     totalAmount: doctorAmounts[doctorName],\n//   }));\n\n//   // Sort doctors in descending order based on the total amount\n//   const sortedDoctors = doctorsWithTotalAmount.sort((a, b) => b.totalAmount - a.totalAmount);\n\n//   return (\n//     <div>\n//       <h2>Top Doctors by Total Amount</h2>\n//       <ul>\n//         {sortedDoctors.map((doctor, index) => (\n//           <li key={index}>\n//             <h4>{doctor.Username_doctor}</h4>\n//             <p>Total Amount: {doctor.totalAmount}</p>\n//             {/* Add more details as needed */}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default TopDoctors;","map":{"version":3,"names":[],"sources":["C:/Users/venka/Downloads/DoctorBooking (3)/DoctorBooking/frontend/src/components/TopDoctors.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const TopDoctors = () => {\r\n//   const [topDoctors, setTopDoctors] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch top 10 doctors based on amount from the server\r\n//     fetch('http://localhost:5000/api/bookings')\r\n//       .then((response) => response.json())\r\n//       .then((data) => setTopDoctors(data))\r\n//       .catch((error) => console.error('Error fetching top doctors:', error));\r\n//   }, []);\r\n\r\n//   // Create a dictionary to store the total amount for each doctor's name\r\n//   const doctorAmounts = {};\r\n\r\n//   // Calculate the total amount for each unique doctor's name\r\n//   topDoctors.forEach((doctor) => {\r\n//     const doctorName = doctor.Username_doctor;\r\n//     const amount = doctor.bookedServicesData[0].amount;\r\n\r\n//     if (doctorAmounts[doctorName]) {\r\n//       doctorAmounts[doctorName] += amount;\r\n//     } else {\r\n//       doctorAmounts[doctorName] = amount;\r\n//     }\r\n//   });\r\n\r\n//   // Convert the dictionary into an array of objects\r\n//   const doctorsWithTotalAmount = Object.keys(doctorAmounts).map((doctorName) => ({\r\n//     Username_doctor: doctorName,\r\n//     totalAmount: doctorAmounts[doctorName],\r\n//   }));\r\n\r\n//   // Sort doctors in descending order based on the total amount\r\n//   const sortedDoctors = doctorsWithTotalAmount.sort((a, b) => b.totalAmount - a.totalAmount);\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Top Doctors by Total Amount</h2>\r\n//       <ul>\r\n//         {sortedDoctors.map((doctor, index) => (\r\n//           <li key={index}>\r\n//             <h4>{doctor.Username_doctor}</h4>\r\n//             <p>Total Amount: {doctor.totalAmount}</p>\r\n//             {/* Add more details as needed */}\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TopDoctors;\r\n"],"mappings":";AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}